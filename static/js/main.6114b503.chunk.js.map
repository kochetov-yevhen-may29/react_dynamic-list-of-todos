{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","enum.ts","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","todoId","setSelectedTodo","className","map","todo","completed","id","classNames","title","type","onClick","TodoFilter","filter","onFilter","select","onSelect","value","onChange","event","target","placeholder","style","pointerEvents","Loader","TodoModal","user","setUser","href","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SortKeys","getTodos","getUser","userId","App","useState","setTodos","loader","setLoader","setFilter","All","setSelect","selectedTodo","a","allTodos","Error","userData","getPreperedTodos","preperedTodos","toLowerCase","filterQuery","trim","includes","Active","Completed","useEffect","getAllTodos","getUserById","useMemo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6114b503.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  todoId: number,\n  setSelectedTodo: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  todoId,\n  setSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => (todo.completed ? (\n        <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                setSelectedTodo(todo);\n              }}\n            >\n              <span className=\"icon\">\n                <i\n                  className={classNames({\n                    'far fa-eye-slash': todo.id === todoId,\n                    'far fa-eye': todo.id !== todoId,\n                  })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ) : (\n        <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\" />\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                setSelectedTodo(todo);\n              }}\n            >\n              <span className=\"icon\">\n                <i\n                  className={classNames({\n                    'far fa-eye-slash': todo.id === todoId,\n                    'far fa-eye': todo.id !== todoId,\n                  })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      )))}\n      ;\n    </tbody>\n  </table>\n));\n","import React from 'react';\nimport { SortKeys } from '../../enum';\n\ntype Props = {\n  filter: string;\n  onFilter: (value: string) => void;\n  select: SortKeys,\n  onSelect: (value: SortKeys) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  filter,\n  onFilter,\n  select,\n  onSelect,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={select}\n          onChange={event => onSelect(event.target.value as SortKeys)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        value={filter}\n        onChange={event => onFilter(event.target.value as SortKeys)}\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n      {filter && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              onFilter('');\n            }}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n));\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo | null;\n  user: User | null;\n  setUser: (user: User | null) => void;\n  setSelectedTodo: (value: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = React.memo(({\n  todo,\n  user,\n  setUser,\n  setSelectedTodo,\n}) => {\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!user && <Loader />}\n      {user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setSelectedTodo(null);\n                setUser(null);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed && (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n              {\n                !todo?.completed && (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )\n              }\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SortKeys {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos, getUser } from './api';\nimport { User } from './types/User';\nimport { SortKeys } from './enum';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loader, setLoader] = useState(false);\n  const [filter, setFilter] = useState('');\n  const [select, setSelect] = useState(SortKeys.All);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n\n  async function getAllTodos() {\n    setLoader(true);\n    try {\n      const allTodos = await getTodos();\n\n      setTodos(allTodos);\n    } catch (error) {\n      throw new Error(error as string);\n    } finally {\n      setLoader(false);\n    }\n  }\n\n  async function getUserById() {\n    if (selectedTodo === null) {\n      return;\n    }\n\n    try {\n      const userData = await getUser(selectedTodo?.userId);\n\n      setUser(userData);\n    } catch (error) {\n      throw new Error(error as string);\n    }\n  }\n\n  useEffect(() => {\n    getAllTodos();\n  }, []);\n\n  useEffect(() => {\n    getUserById();\n  }, [selectedTodo?.id, user?.id]);\n\n  function getPreperedTodos() {\n    let preperedTodos = [...todos];\n\n    if (filter) {\n      preperedTodos = preperedTodos.filter((todo) => {\n        const title = todo.title.toLowerCase();\n        const filterQuery = filter.trim().toLowerCase();\n\n        return title.includes(filterQuery);\n      });\n    }\n\n    if (select) {\n      switch (select) {\n        case SortKeys.All:\n          return preperedTodos;\n        case SortKeys.Active:\n          return preperedTodos.filter(todo => todo.completed === false);\n        case SortKeys.Completed:\n          return preperedTodos.filter(todo => todo.completed === true);\n        default:\n          return preperedTodos;\n      }\n    }\n\n    return preperedTodos;\n  }\n\n  const preperedTodos = useMemo(() => {\n    return getPreperedTodos();\n  }, [getPreperedTodos, filter, SortKeys]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filter={filter}\n                onFilter={setFilter}\n                select={select}\n                onSelect={setSelect}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!loader && (\n                <TodoList\n                  todos={preperedTodos}\n                  todoId={selectedTodo?.id || 0}\n                  setSelectedTodo={setSelectedTodo}\n                />\n              )}\n              {loader && <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          user={user}\n          setUser={setUser}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}